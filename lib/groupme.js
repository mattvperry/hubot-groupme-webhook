/// <reference path="..\typings\main.d.ts" />
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator.throw(value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments)).next());
    });
};
const thenify = require("thenify");
const tsbot_1 = require("tsbot");
const groupme_1 = require("groupme");
class GroupMeAdapter extends tsbot_1.Adapter {
    constructor(robot) {
        super(robot);
        this.robot.logger.info("Initialize GroupMe Adapter");
        this._maxLen = 1000;
        this._token = process.env.HUBOT_GROUPME_TOKEN;
        this._botId = process.env.HUBOT_GROUPME_BOT_ID;
        this._imageSvc = `https://image.groupme.com/pictures?access_token=${this._token}`;
        if (!this.robot.brain.get("emoteCache")) {
            this.robot.brain.set("emoteCache", {});
        }
        this._emoteCache = this.robot.brain.get("emoteCache");
    }
    run() {
        return __awaiter(this, void 0, Promise, function* () {
            this.robot.logger.info("Run GroupMe Adapter");
            try {
                let bots = yield thenify(groupme_1.Stateless.Bots.index)(this._token);
                let bot = bots.filter((bot) => bot.bot_id === this._botId)[0];
                let group = yield thenify(groupme_1.Stateless.Groups.show)(this._token, bot.group_id);
                for (let member of group.members) {
                    this.robot.brain.userForId(member.user_id, {
                        room: group.id,
                        name: member.nickname
                    });
                }
                this.robot.router.post("/hubot/incoming", (req, res) => {
                    if (req.body.sender_type !== "bot") {
                        let user = this.robot.brain.userForId(req.body.user_id);
                        this.receive(new tsbot_1.TextMessage(user, req.body.text, req.body.id));
                    }
                    res.writeHead(200, { "Content-Type": "text/plain " });
                    res.end();
                });
                this.robot.logger.info("Connected to GroupMe");
                this.emit("connected");
            }
            catch (e) {
                this._logError(e);
            }
        });
    }
    send(envelope, ...strings) {
        let chunkedStrings = this._chunkStrings(strings);
        return this._delaySequence(...chunkedStrings.map(s => {
            return () => this._botPost(s);
        }));
    }
    reply(envelope, ...strings) {
        return this.send(envelope, `@${envelope.user.name} ${strings[0]}`, ...(strings.slice(1)));
    }
    topic(envelope, ...strings) {
        return this.send(envelope, `/topic ${strings[0]}`);
    }
    emote(envelope, ...strings) {
        return __awaiter(this, void 0, Promise, function* () {
            let images = yield Promise.all(strings.map(s => this._reuploadImage(s)));
            return this._delaySequence(...images.map(i => {
                return () => this._botPost("", i.picture_url);
            }));
        });
    }
    close() {
    }
    _logError(e) {
        if (e.body) {
            this.robot.logger.error(e.body);
        }
        else {
            this.robot.logger.error(e);
        }
    }
    _delay(ms) {
        return new Promise((resolve, reject) => {
            setTimeout(resolve, ms);
        });
    }
    _botPost(message, picture_url) {
        return __awaiter(this, void 0, Promise, function* () {
            let post = thenify(groupme_1.Stateless.Bots.post);
            return yield post(this._token, this._botId, message, { picture_url: picture_url });
        });
    }
    _delaySequence(...generators) {
        return __awaiter(this, void 0, Promise, function* () {
            try {
                yield this._delay(1000);
                for (const generator of generators) {
                    yield generator();
                    yield this._delay(1000);
                }
            }
            catch (e) {
                this._logError(e);
            }
        });
    }
    _reuploadImage(url) {
        const cached = this._emoteCache[url];
        if (cached != null) {
            return Promise.resolve({ url: cached, picture_url: cached });
        }
        return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            try {
                let dlReq = yield this._createRequest("GET", url);
                let ulReq = yield this._createRequest("POST", this._imageSvc);
                dlReq.on("error", reject);
                dlReq.on("response", (res) => {
                    res.pipe(ulReq);
                    res.on("end", () => ulReq.end());
                });
                dlReq.end();
                let body = "";
                ulReq.on("error", reject);
                ulReq.on("response", (res) => {
                    res.on("data", (chunk) => body += chunk);
                    res.on("end", () => resolve(JSON.parse(body).payload));
                });
            }
            catch (e) {
                reject(e);
            }
        }));
    }
    _createRequest(method, url) {
        return new Promise((resolve, reject) => {
            this.robot.http(url).request(method, (err, req) => {
                if (err != null) {
                    reject(err);
                }
                else {
                    resolve(req);
                }
            });
        });
    }
    _chunkStrings(strings) {
        // First pass break on new lines
        let result = [].concat(...strings.map((s) => this._wrapWith(s, [], "\n")));
        // Second pass break on words
        result = [].concat(...result.map((s) => this._wrapWith(s, [], " ")));
        // Third pass break on chars
        return [].concat(...result.map((s) => this._wrapWith(s, [], "")));
    }
    _wrapWith(text, seed, delimiter) {
        if (text.length > this._maxLen) {
            let edge = text.slice(0, this._maxLen).lastIndexOf(delimiter);
            if (edge > 0) {
                let line = text.slice(0, edge);
                let remainder = text.slice(edge + 1);
                seed = this._wrapWith(remainder, seed, delimiter);
                return [line].concat(seed);
            }
        }
        return [text].concat(seed);
    }
}
function use(robot) {
    return new GroupMeAdapter(robot);
}
exports.use = use;

//# sourceMappingURL=data:application/json;base64,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LEVBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLFdBQVcsQ0FBQyxTQUFTLENBQUMsQ0FBQztZQUM5RCxFQUFFLENBQUMsQ0FBQyxJQUFJLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFDWCxJQUFJLElBQUksR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQztnQkFDL0IsSUFBSSxTQUFTLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLEdBQUcsQ0FBQyxDQUFDLENBQUM7Z0JBQ3JDLElBQUksR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLFNBQVMsRUFBRSxJQUFJLEVBQUUsU0FBUyxDQUFDLENBQUM7Z0JBQ2xELE1BQU0sQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUMvQixDQUFDO1FBQ0wsQ0FBQztRQUNELE1BQU0sQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUMvQixDQUFDO0FBQ0wsQ0FBQztBQUVELGFBQW9CLEtBQVk7SUFDNUIsTUFBTSxDQUFDLElBQUksY0FBYyxDQUFDLEtBQUssQ0FBQyxDQUFDO0FBQ3JDLENBQUM7QUFGZSxXQUFHLE1BRWxCLENBQUEiLCJmaWxlIjoiZ3JvdXBtZS5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuLlxcdHlwaW5nc1xcbWFpbi5kLnRzXCIgLz5cclxuXHJcbmltcG9ydCAqIGFzIHRoZW5pZnkgZnJvbSBcInRoZW5pZnlcIjtcclxuaW1wb3J0IHsgQ2xpZW50UmVxdWVzdCwgSW5jb21pbmdNZXNzYWdlIH0gZnJvbSBcImh0dHBcIjtcclxuaW1wb3J0IHsgUm9ib3QsIEFkYXB0ZXIsIFRleHRNZXNzYWdlLCBVc2VyLCBFbnZlbG9wZSB9IGZyb20gXCJ0c2JvdFwiO1xyXG5pbXBvcnQgeyBTdGF0ZWxlc3MgYXMgZ3JvdXBtZSwgSW1hZ2VTZXJ2aWNlLCBJbWFnZVNlcnZpY2VQYXlsb2FkIH0gZnJvbSBcImdyb3VwbWVcIjtcclxuaW1wb3J0IHsgUmVxdWVzdCwgUmVzcG9uc2UgfSBmcm9tIFwiZXhwcmVzcy1zZXJ2ZS1zdGF0aWMtY29yZVwiO1xyXG5cclxuY2xhc3MgR3JvdXBNZUFkYXB0ZXIgZXh0ZW5kcyBBZGFwdGVyIHtcclxuICAgIHByaXZhdGUgX21heExlbjogbnVtYmVyO1xyXG4gICAgcHJpdmF0ZSBfdG9rZW46IHN0cmluZztcclxuICAgIHByaXZhdGUgX2JvdElkOiBzdHJpbmc7XHJcbiAgICBwcml2YXRlIF9pbWFnZVN2Yzogc3RyaW5nO1xyXG4gICAgcHJpdmF0ZSBfZW1vdGVDYWNoZTogeyBbdXJsOiBzdHJpbmddOiBzdHJpbmcgfTtcclxuXHJcbiAgICBjb25zdHJ1Y3Rvcihyb2JvdDogUm9ib3QpIHtcclxuICAgICAgICBzdXBlcihyb2JvdCk7XHJcbiAgICAgICAgdGhpcy5yb2JvdC5sb2dnZXIuaW5mbyhcIkluaXRpYWxpemUgR3JvdXBNZSBBZGFwdGVyXCIpO1xyXG5cclxuICAgICAgICB0aGlzLl9tYXhMZW4gPSAxMDAwO1xyXG4gICAgICAgIHRoaXMuX3Rva2VuID0gcHJvY2Vzcy5lbnYuSFVCT1RfR1JPVVBNRV9UT0tFTjtcclxuICAgICAgICB0aGlzLl9ib3RJZCA9IHByb2Nlc3MuZW52LkhVQk9UX0dST1VQTUVfQk9UX0lEO1xyXG4gICAgICAgIHRoaXMuX2ltYWdlU3ZjID0gYGh0dHBzOi8vaW1hZ2UuZ3JvdXBtZS5jb20vcGljdHVyZXM/YWNjZXNzX3Rva2VuPSR7dGhpcy5fdG9rZW59YDtcclxuICAgICAgICBcclxuICAgICAgICBpZiAoIXRoaXMucm9ib3QuYnJhaW4uZ2V0KFwiZW1vdGVDYWNoZVwiKSkge1xyXG4gICAgICAgICAgICB0aGlzLnJvYm90LmJyYWluLnNldChcImVtb3RlQ2FjaGVcIiwge30pO1xyXG4gICAgICAgIH1cclxuICAgICAgICBcclxuICAgICAgICB0aGlzLl9lbW90ZUNhY2hlID0gdGhpcy5yb2JvdC5icmFpbi5nZXQoXCJlbW90ZUNhY2hlXCIpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBhc3luYyBydW4oKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgICAgICAgdGhpcy5yb2JvdC5sb2dnZXIuaW5mbyhcIlJ1biBHcm91cE1lIEFkYXB0ZXJcIik7XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgbGV0IGJvdHMgPSBhd2FpdCB0aGVuaWZ5KGdyb3VwbWUuQm90cy5pbmRleCkodGhpcy5fdG9rZW4pO1xyXG4gICAgICAgICAgICBsZXQgYm90ID0gYm90cy5maWx0ZXIoKGJvdCkgPT4gYm90LmJvdF9pZCA9PT0gdGhpcy5fYm90SWQpWzBdO1xyXG4gICAgICAgICAgICBsZXQgZ3JvdXAgPSBhd2FpdCB0aGVuaWZ5KGdyb3VwbWUuR3JvdXBzLnNob3cpKHRoaXMuX3Rva2VuLCBib3QuZ3JvdXBfaWQpO1xyXG4gICAgICAgICAgICBmb3IgKGxldCBtZW1iZXIgb2YgZ3JvdXAubWVtYmVycykge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5yb2JvdC5icmFpbi51c2VyRm9ySWQobWVtYmVyLnVzZXJfaWQsIHtcclxuICAgICAgICAgICAgICAgICAgICByb29tOiBncm91cC5pZCxcclxuICAgICAgICAgICAgICAgICAgICBuYW1lOiBtZW1iZXIubmlja25hbWVcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB0aGlzLnJvYm90LnJvdXRlci5wb3N0KFwiL2h1Ym90L2luY29taW5nXCIsIChyZXE6IFJlcXVlc3QsIHJlczogUmVzcG9uc2UpID0+IHtcclxuICAgICAgICAgICAgICAgIGlmIChyZXEuYm9keS5zZW5kZXJfdHlwZSAhPT0gXCJib3RcIikge1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCB1c2VyID0gdGhpcy5yb2JvdC5icmFpbi51c2VyRm9ySWQocmVxLmJvZHkudXNlcl9pZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5yZWNlaXZlKG5ldyBUZXh0TWVzc2FnZSh1c2VyLCByZXEuYm9keS50ZXh0LCByZXEuYm9keS5pZCkpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmVzLndyaXRlSGVhZCgyMDAsIHsgXCJDb250ZW50LVR5cGVcIjogXCJ0ZXh0L3BsYWluIFwifSk7XHJcbiAgICAgICAgICAgICAgICByZXMuZW5kKCk7XHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5yb2JvdC5sb2dnZXIuaW5mbyhcIkNvbm5lY3RlZCB0byBHcm91cE1lXCIpO1xyXG4gICAgICAgICAgICB0aGlzLmVtaXQoXCJjb25uZWN0ZWRcIik7XHJcbiAgICAgICAgfSBjYXRjaCAoZSkge1xyXG4gICAgICAgICAgICB0aGlzLl9sb2dFcnJvcihlKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHNlbmQoZW52ZWxvcGU6IEVudmVsb3BlLCAuLi5zdHJpbmdzOiBzdHJpbmdbXSk6IFByb21pc2U8dm9pZD4ge1xyXG4gICAgICAgIGxldCBjaHVua2VkU3RyaW5ncyA9IHRoaXMuX2NodW5rU3RyaW5ncyhzdHJpbmdzKTtcclxuICAgICAgICByZXR1cm4gdGhpcy5fZGVsYXlTZXF1ZW5jZSguLi5jaHVua2VkU3RyaW5ncy5tYXAocyA9PiB7XHJcbiAgICAgICAgICAgIHJldHVybiAoKSA9PiB0aGlzLl9ib3RQb3N0KHMpO1xyXG4gICAgICAgIH0pKTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgcmVwbHkoZW52ZWxvcGU6IEVudmVsb3BlLCAuLi5zdHJpbmdzOiBzdHJpbmdbXSk6IFByb21pc2U8dm9pZD4ge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnNlbmQoZW52ZWxvcGUsIGBAJHtlbnZlbG9wZS51c2VyLm5hbWV9ICR7c3RyaW5nc1swXX1gLCAuLi4oc3RyaW5ncy5zbGljZSgxKSkpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyB0b3BpYyhlbnZlbG9wZTogRW52ZWxvcGUsIC4uLnN0cmluZ3M6IHN0cmluZ1tdKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuc2VuZChlbnZlbG9wZSwgYC90b3BpYyAke3N0cmluZ3NbMF19YCk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGFzeW5jIGVtb3RlKGVudmVsb3BlOiBFbnZlbG9wZSwgLi4uc3RyaW5nczogc3RyaW5nW10pOiBQcm9taXNlPHZvaWQ+IHtcclxuICAgICAgICBsZXQgaW1hZ2VzID0gYXdhaXQgUHJvbWlzZS5hbGw8SW1hZ2VTZXJ2aWNlUGF5bG9hZD4oc3RyaW5ncy5tYXAocyA9PiB0aGlzLl9yZXVwbG9hZEltYWdlKHMpKSk7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2RlbGF5U2VxdWVuY2UoLi4uaW1hZ2VzLm1hcChpID0+IHtcclxuICAgICAgICAgICAgcmV0dXJuICgpID0+IHRoaXMuX2JvdFBvc3QoXCJcIiwgaS5waWN0dXJlX3VybCk7XHJcbiAgICAgICAgfSkpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBjbG9zZSgpOiB2b2lkIHtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIF9sb2dFcnJvcihlOiBhbnkpOiB2b2lkIHtcclxuICAgICAgICBpZiAoZS5ib2R5KSB7XHJcbiAgICAgICAgICAgIHRoaXMucm9ib3QubG9nZ2VyLmVycm9yKGUuYm9keSk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5yb2JvdC5sb2dnZXIuZXJyb3IoZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgX2RlbGF5KG1zOiBudW1iZXIpOiBQcm9taXNlPHZvaWQ+IHtcclxuICAgICAgICByZXR1cm4gbmV3IFByb21pc2U8dm9pZD4oKHJlc29sdmUsIHJlamVjdCkgPT4ge1xyXG4gICAgICAgICAgICBzZXRUaW1lb3V0KHJlc29sdmUsIG1zKTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIFxyXG4gICAgcHJpdmF0ZSBhc3luYyBfYm90UG9zdChtZXNzYWdlOiBzdHJpbmcsIHBpY3R1cmVfdXJsPzogc3RyaW5nKTogUHJvbWlzZTx7fT4ge1xyXG4gICAgICAgIGxldCBwb3N0ID0gdGhlbmlmeShncm91cG1lLkJvdHMucG9zdCk7XHJcbiAgICAgICAgcmV0dXJuIGF3YWl0IHBvc3QodGhpcy5fdG9rZW4sIHRoaXMuX2JvdElkLCBtZXNzYWdlLCB7IHBpY3R1cmVfdXJsOiBwaWN0dXJlX3VybCB9KTtcclxuICAgIH1cclxuICAgIFxyXG4gICAgcHJpdmF0ZSBhc3luYyBfZGVsYXlTZXF1ZW5jZSguLi5nZW5lcmF0b3JzOiAoKCkgPT4gUHJvbWlzZTxhbnk+KVtdKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgYXdhaXQgdGhpcy5fZGVsYXkoMTAwMCk7XHJcbiAgICAgICAgICAgIGZvciAoY29uc3QgZ2VuZXJhdG9yIG9mIGdlbmVyYXRvcnMpIHtcclxuICAgICAgICAgICAgICAgIGF3YWl0IGdlbmVyYXRvcigpO1xyXG4gICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5fZGVsYXkoMTAwMCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9IGNhdGNoIChlKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2xvZ0Vycm9yKGUpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIF9yZXVwbG9hZEltYWdlKHVybDogc3RyaW5nKTogUHJvbWlzZTxJbWFnZVNlcnZpY2VQYXlsb2FkPiB7XHJcbiAgICAgICAgY29uc3QgY2FjaGVkID0gdGhpcy5fZW1vdGVDYWNoZVt1cmxdO1xyXG4gICAgICAgIGlmIChjYWNoZWQgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHsgdXJsOiBjYWNoZWQsIHBpY3R1cmVfdXJsOiBjYWNoZWQgfSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gbmV3IFByb21pc2U8SW1hZ2VTZXJ2aWNlUGF5bG9hZD4oYXN5bmMgKHJlc29sdmUsIHJlamVjdCkgPT4ge1xyXG4gICAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAgICAgbGV0IGRsUmVxID0gYXdhaXQgdGhpcy5fY3JlYXRlUmVxdWVzdChcIkdFVFwiLCB1cmwpO1xyXG4gICAgICAgICAgICAgICAgbGV0IHVsUmVxID0gYXdhaXQgdGhpcy5fY3JlYXRlUmVxdWVzdChcIlBPU1RcIiwgdGhpcy5faW1hZ2VTdmMpO1xyXG5cclxuICAgICAgICAgICAgICAgIGRsUmVxLm9uKFwiZXJyb3JcIiwgcmVqZWN0KTtcclxuICAgICAgICAgICAgICAgIGRsUmVxLm9uKFwicmVzcG9uc2VcIiwgKHJlczogSW5jb21pbmdNZXNzYWdlKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmVzLnBpcGUodWxSZXEpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJlcy5vbihcImVuZFwiLCAoKSA9PiB1bFJlcS5lbmQoKSk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIGRsUmVxLmVuZCgpO1xyXG5cclxuICAgICAgICAgICAgICAgIGxldCBib2R5ID0gXCJcIjtcclxuICAgICAgICAgICAgICAgIHVsUmVxLm9uKFwiZXJyb3JcIiwgcmVqZWN0KTtcclxuICAgICAgICAgICAgICAgIHVsUmVxLm9uKFwicmVzcG9uc2VcIiwgKHJlczogSW5jb21pbmdNZXNzYWdlKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmVzLm9uKFwiZGF0YVwiLCAoY2h1bmspID0+IGJvZHkgKz0gY2h1bmspO1xyXG4gICAgICAgICAgICAgICAgICAgIHJlcy5vbihcImVuZFwiLCAoKSA9PiByZXNvbHZlKEpTT04ucGFyc2UoYm9keSkucGF5bG9hZCkpO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcclxuICAgICAgICAgICAgICAgIHJlamVjdChlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICBwcml2YXRlIF9jcmVhdGVSZXF1ZXN0KG1ldGhvZDogc3RyaW5nLCB1cmw6IHN0cmluZyk6IFByb21pc2U8Q2xpZW50UmVxdWVzdD4ge1xyXG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZTxDbGllbnRSZXF1ZXN0PigocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMucm9ib3QuaHR0cCh1cmwpLnJlcXVlc3QobWV0aG9kLCAoZXJyLCByZXEpID0+IHtcclxuICAgICAgICAgICAgICAgIGlmIChlcnIgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJlamVjdChlcnIpO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICByZXNvbHZlKHJlcSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgX2NodW5rU3RyaW5ncyhzdHJpbmdzOiBzdHJpbmdbXSk6IHN0cmluZ1tdIHtcclxuICAgICAgICAvLyBGaXJzdCBwYXNzIGJyZWFrIG9uIG5ldyBsaW5lc1xyXG4gICAgICAgIGxldCByZXN1bHQgPSBbXS5jb25jYXQoLi4uc3RyaW5ncy5tYXAoKHMpID0+IHRoaXMuX3dyYXBXaXRoKHMsIFtdLCBcIlxcblwiKSkpO1xyXG4gICAgICAgIC8vIFNlY29uZCBwYXNzIGJyZWFrIG9uIHdvcmRzXHJcbiAgICAgICAgcmVzdWx0ID0gW10uY29uY2F0KC4uLnJlc3VsdC5tYXAoKHMpID0+IHRoaXMuX3dyYXBXaXRoKHMsIFtdLCBcIiBcIikpKTtcclxuICAgICAgICAvLyBUaGlyZCBwYXNzIGJyZWFrIG9uIGNoYXJzXHJcbiAgICAgICAgcmV0dXJuIFtdLmNvbmNhdCguLi5yZXN1bHQubWFwKChzKSA9PiB0aGlzLl93cmFwV2l0aChzLCBbXSwgXCJcIikpKTtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIF93cmFwV2l0aCh0ZXh0OiBzdHJpbmcsIHNlZWQ6IHN0cmluZ1tdLCBkZWxpbWl0ZXI6IHN0cmluZyk6IHN0cmluZ1tdIHtcclxuICAgICAgICBpZiAodGV4dC5sZW5ndGggPiB0aGlzLl9tYXhMZW4pIHtcclxuICAgICAgICAgICAgbGV0IGVkZ2UgPSB0ZXh0LnNsaWNlKDAsIHRoaXMuX21heExlbikubGFzdEluZGV4T2YoZGVsaW1pdGVyKTtcclxuICAgICAgICAgICAgaWYgKGVkZ2UgPiAwKSB7XHJcbiAgICAgICAgICAgICAgICBsZXQgbGluZSA9IHRleHQuc2xpY2UoMCwgZWRnZSk7XHJcbiAgICAgICAgICAgICAgICBsZXQgcmVtYWluZGVyID0gdGV4dC5zbGljZShlZGdlICsgMSk7XHJcbiAgICAgICAgICAgICAgICBzZWVkID0gdGhpcy5fd3JhcFdpdGgocmVtYWluZGVyLCBzZWVkLCBkZWxpbWl0ZXIpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFtsaW5lXS5jb25jYXQoc2VlZCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIFt0ZXh0XS5jb25jYXQoc2VlZCk7XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiB1c2Uocm9ib3Q6IFJvYm90KTogQWRhcHRlciB7XHJcbiAgICByZXR1cm4gbmV3IEdyb3VwTWVBZGFwdGVyKHJvYm90KTtcclxufSJdLCJzb3VyY2VSb290IjoiLi4vc3JjIn0=
